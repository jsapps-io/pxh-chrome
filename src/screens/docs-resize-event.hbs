---
title: "pxh-drawer"
bodyClass: "pxh-chromeful"
errorSelected: false
---

    <div class="pxh-wrapper">
      <div class="pxh-view-header pxh-view-header--wide@md pxh-view-header--narrow@lg pxh-view-header--nudge-until@md">
        <h1 class="pxh-view-header__title">
          <a href="index.html" class="pxh-view-header__title-link">
            Resize Event
          </a>
        </h1>
      </div>
      <div class="pxh-view pxh-view--wide@md pxh-view--narrow@lg" id="js-view">

        <div class="pxh-docs">


          <h1>Listening for resize events</h1>

          <p>Since pxh-chrome is mobile-first and responsive, there may be cases where you need to rerender your microapp content based on changes in width to the <code>pxh-view</code> wrapping element. This is common with SVGs or other types of content that need to render at a specific and known pixel width.</p>

          <p>Listening to <code>window.width</code> will cover many responsive use cases, but it doesn't cover the expansion (and collapse) of the navigation drawer, as that behavior changes the width of <code>pxh-view</code> without changing the width of the browser window.</p>

          <p>Fortunately, pxh-chrome and the App Hub provides a custom event, <code>pxhViewResized</code>, that fires whenever the <code>pxh-view</code> element changes size. Simply listen for this event in your microapp, and respond as necessary after it fires.</p>

          <ul>
            <li>We include the ResizeSensor class from css-element-queries to give ourselves the ability to track when elements resize</li>
            <li>We grab <code>pxh-view</code> by ID and put it in a var</li>
            <li><code>document.getElementById('js-view'); // you'll need to add this ID to your markup</code></li>
            <li>In cases where pxh-chrome uses classes or IDs to grab elements via JS, we prefix them with <code>js-*</code> so we know there are no actual CSS styles associated with that attribute</li>
            <li>We create a new custom event called <code>pxhViewResized</code></li>
          </ul>

          <pre><code>javascript
var pxhViewResized = new CustomEvent('pxhViewResized', {
 'detail' : pxhView.offsetWidth
});</code></pre>

          <ul>
            <li>Since it's a custom event, we return the offsetWidth in the detail object</li>
            <li>We add a new <code>ResizeSensor</code> to the pxh-view element, which dispatches the <code>pxhViewResized</code> event when it fires
            </li>
          </ul>

          <pre><code>javascript
new ResizeSensor(pxhView, function() {
  document.dispatchEvent(pxhViewResized);
});</code></pre>

          <p><strong>Here's a basic usage example (do this in your microapp ... pxh-chrome should handle the rest):</strong></p>

          <pre><code>javascript
document.addEventListener('pxhViewResized', function(event) {
  console.log('pxhViewResized was fired!');
  console.log('width changed to ' + event.detail);
});</code></pre>

          <p>P.S. If you look at the console output for this example, you'll realize you'll want to implement some debouncing on your event listener ... our current thinking is that the debouncing should be the responsibility of the microapp, not the event itself, but we're open to alternative perspectives.</p>
        </div>
      </div>
    </div>
